// File: App.svelte
<script>
  import "./router.js";
  import ThemeSwitcher from "./components/ThemeSwitcher.svelte";
</script>

<nav class="container-fluid" style="padding:.5rem 1rem;">
  <ul>
    <li><strong>USDNote</strong></li>
  </ul>
  <ul>
    <li><a href="/">Home</a></li>
    <li><a href="/signup">Signup</a></li>
    <li><a href="/playground">Playground</a></li>
    <li><ThemeSwitcher /></li>
  </ul>
</nav>

<main class="container" style="padding:1rem 0;">
  <div id="view"></div>
</main>


// File: components/ThemeSwitcher.svelte
<script>
  import { onMount, onDestroy } from "svelte";

  const MEDIA = "(prefers-color-scheme: dark)";
  let mode = "auto"; // "auto" | "light" | "dark"
  let mql;

  const effective = () => (window.matchMedia(MEDIA).matches ? "dark" : "light");

  const apply = (m) => {
    const theme = m === "auto" ? effective() : m;
    document.documentElement.setAttribute("data-theme", theme);
  };

  function setMode(next) {
    mode = next;
    localStorage.setItem("theme-mode", next);
    apply(next);
  }

  function onMediaChange() {
    if (mode === "auto") apply("auto");
  }

  onMount(() => {
    const saved = localStorage.getItem("theme-mode");
    mode = saved || "auto";
    mql = window.matchMedia(MEDIA);
    mql.addEventListener?.("change", onMediaChange);
    apply(mode);
  });

  onDestroy(() => {
    mql?.removeEventListener?.("change", onMediaChange);
  });
</script>

<nav aria-label="Theme switcher">
  <ul class="theme-switcher">
    <li>
      <details class="dropdown">
        <summary class="secondary">Theme</summary>
        <!-- svelte-ignore a11y-invalid-attribute -->
        <ul>
          <li>
            <a
              href="#"
              data-theme-switcher="auto"
              on:click={() => setMode("auto")}>Auto</a
            >
          </li>
          <li>
            <a
              href="#"
              data-theme-switcher="light"
              on:click={() => setMode("light")}>Light</a
            >
          </li>
          <li>
            <a
              href="#"
              data-theme-switcher="dark"
              on:click={() => setMode("dark")}>Dark</a
            >
          </li>
        </ul>
      </details>
    </li>
  </ul>
</nav>

<style>
  .theme-switcher {
    display: flex;
    gap: 0.5rem;
    align-items: center;
  }
</style>


// File: main.js
// Global CSS
import "@picocss/pico/css/pico.min.css"; // Pico (class-based)
import "./styles/global.css"; // Global CSS
import "./styles/form.css";
import "./styles/tokens.css"; // Optional theming tokens

import App from "./App.svelte";

new App({ target: document.getElementById("app") });


// File: pages/Home.svelte
<section class="card">
  <hgroup>
    <h2>Welcome to USDNote</h2>
    <p>Svelte + Vite + page.js + PicoCSS</p>
  </hgroup>
  <p>
    Use the navigation to open the <strong>Playground</strong> and preview
    components & Pico styling.
  </p>
  <a href="/playground" role="button" data-navigo>Open Playground</a>
</section>


// File: pages/Playground.svelte
<script>
  import Button from "../ui/Button.svelte";

  let dialogEl;
  let email = "";
  let amount = 100;
  let open = false;

  function submit(e) {
    e.preventDefault();
    openDialog();
  }

  function openDialog() {
    open = true;
    dialogEl?.showModal();
  }

  function closeDialog() {
    open = false;
    dialogEl?.close();
  }
</script>

<section>
  <h2>UI Playground</h2>
  <p>Quickly test Pico styles, forms, and components (Amber + light/dark).</p>

  <!-- Buttons -->
  <article class="card">
    <h3>Buttons</h3>
    <div class="grid">
      <Button>Custom</Button>
      <button>Default</button>
      <button class="secondary">Secondary</button>
      <button class="contrast">Contrast</button>
      <button disabled>Disabled</button>
    </div>
  </article>

  <!-- Form -->
  <article class="card">
    <h3>Form</h3>
    <form on:submit={submit} style="max-width:520px;">
      <div class="grid">
        <label>Email <input type="email" bind:value={email} required /></label>
        <label
          >Amount <input
            type="number"
            min="0"
            step="0.01"
            bind:value={amount}
          /></label
        >
      </div>

      <div style="display:flex; gap:.75rem; margin-top:1rem;">
        <button type="submit">Submit</button>
        <button
          type="button"
          class="secondary"
          on:click={() => {
            email = "";
            amount = 100;
          }}>Reset</button
        >
      </div>
    </form>
  </article>

  <!-- Misc -->
  <article class="card">
    <h3>Misc</h3>
    <progress value="40" max="100"></progress>
    <details>
      <summary>Accordion</summary>
      <p>Pico’s defaults look clean with minimal markup.</p>
    </details>
  </article>

  <!-- Modal trigger -->
  <article class="card">
    <h3>Modal</h3>
    <button class="contrast" type="button" on:click={openDialog}
      >Open Modal</button
    >
  </article>
</section>

<!-- Accessible native dialog (no click handlers on non-interactive elements) -->
<dialog bind:this={dialogEl}>
  <article>
    <header>
      <button aria-label="Close" rel="prev" type="button" on:click={closeDialog}
      ></button>
      <h3>Confirm</h3>
    </header>
    <p>
      Submit transaction for <strong>{email || "N/A"}</strong> —
      <strong>${amount}</strong>?
    </p>
    <footer>
      <button class="secondary" type="button" on:click={closeDialog}
        >Cancel</button
      >
      <button type="button" on:click={closeDialog}>Confirm</button>
    </footer>
  </article>
</dialog>


// File: pages/Signup.svelte
<script>
  import FormHeader from "../ui/FormHeader.svelte";
  import TextField from "../ui/TextField.svelte";
  import PasswordField from "../ui/PasswordField.svelte";
  import Checkbox from "../ui/Checkbox.svelte";
  import Button from "../ui/Button.svelte";
  import Toast from "../ui/Toast.svelte";

  let firstName = "";
  let lastName = "";
  let phone = "";
  let email = "";
  let email2 = "";
  let pwd = "";
  let pwd2 = "";
  let showPwd = false; // mirrors your working page's "Show Password"
  let isSubmitting = false;

  let toastMessage = "";
  let toastType = "info";

  $: emailMatch =
    email &&
    email2 &&
    email.trim().toLowerCase() === email2.trim().toLowerCase();
  $: pwdMatch = pwd && pwd2 && pwd === pwd2;

  function handleSubmit(e) {
    e.preventDefault();

    if (!email || !pwd || !firstName || !lastName) {
      toastMessage = "Please fill all required fields";
      toastType = "error";
      return;
    }
    if (!emailMatch) {
      toastMessage = "Email fields do not match";
      toastType = "error";
      return;
    }
    if (!pwdMatch) {
      toastMessage = "Password fields do not match";
      toastType = "error";
      return;
    }

    // UI-only submit
    isSubmitting = true;
    setTimeout(() => {
      isSubmitting = false;
      toastMessage = "Account created (demo)!";
      toastType = "success";
    }, 600);
  }
</script>

<article>
  <header>
    <FormHeader title="Sign Up" />
  </header>

  <form on:submit={handleSubmit} novalidate>
    <TextField
      id="first-name"
      label="First Name"
      bind:value={firstName}
      required
    />
    <TextField
      id="last-name"
      label="Last Name"
      bind:value={lastName}
      required
    />

    <TextField
      id="phone-number"
      label="Phone Number"
      type="tel"
      bind:value={phone}
    />

    <TextField
      id="email-signup"
      label="Email"
      type="email"
      bind:value={email}
      required
    />
    <TextField
      id="confirm-email-signup"
      label="Confirm Email"
      type="email"
      bind:value={email2}
      required
      invalid={email && email2 && !emailMatch}
      hint={!emailMatch && email && email2 ? "Emails do not match" : ""}
    />

    <!-- Password + confirm (toggle show like your working page) -->
    {#if showPwd}
      <TextField
        id="password-signup"
        label="Password"
        type="text"
        bind:value={pwd}
        required
      />
      <TextField
        id="confirm-password-signup"
        label="Confirm Password"
        type="text"
        bind:value={pwd2}
        required
        invalid={pwd && pwd2 && !pwdMatch}
        hint={!pwdMatch && pwd && pwd2 ? "Passwords do not match" : ""}
      />
    {:else}
      <TextField
        id="password-signup"
        label="Password"
        type="password"
        bind:value={pwd}
        required
      />
      <TextField
        id="confirm-password-signup"
        label="Confirm Password"
        type="password"
        bind:value={pwd2}
        required
        invalid={pwd && pwd2 && !pwdMatch}
        hint={!pwdMatch && pwd && pwd2 ? "Passwords do not match" : ""}
      />
    {/if}

    <Checkbox id="show-pwd" bind:checked={showPwd}>Show Password</Checkbox>

    <Button
      type="submit"
      disabled={isSubmitting}
      aria-busy={isSubmitting ? "true" : "false"}
    >
      {isSubmitting ? "Signing up..." : "Sign Up"}
    </Button>

    <p>Already have account? <a href="/login">Log in</a></p>
  </form>

  <Toast message={toastMessage} type={toastType} />
</article>


// File: router.js
import page from "page";
import Home from "./pages/Home.svelte";
import Playground from "./pages/Playground.svelte";
import Signup from "./pages/Signup.svelte";

const mount = (Comp) => {
  const target = document.getElementById("view");
  if (!target) return;
  target.innerHTML = "";
  new Comp({ target });
};

page("/", () => mount(Home));
page("/playground", () => mount(Playground));
page("/signup", () => mount(Signup));
page(); // start router


// File: ui/Button.svelte
<script>
  export let type = "button";
  export let disabled = false;
</script>

<button {type} {disabled}>
  <slot />
</button>


// File: ui/Checkbox.svelte
<script>
  export let id;
  export let checked = false;
  export let label = "";
</script>

<label class="label-inline">
  <input {id} type="checkbox" bind:checked />
  <span><slot>{label}</slot></span>
</label>


// File: ui/FormHeader.svelte
<script>
  export let title = "";
  export let subtitle = "";
</script>

<div class="ph">
  <h1>{title}</h1>
  {#if subtitle}<p class="muted">{subtitle}</p>{/if}
</div>

<style>
  .ph {
    margin: 1rem 0 1.5rem;
  }
  .muted {
    color: var(--pico-muted-color);
    font-size: 0.9rem;
    margin-top: -1rem;
  }
</style>


// File: ui/PageHeader.svelte
<script>
  export let title = "";
  export let subtitle = "";
</script>

<header class="ph">
  <h1>{title}</h1>
  {#if subtitle}<p class="muted">{subtitle}</p>{/if}
</header>

<style>
  .ph {
    margin: 1rem 0 1.5rem;
  }
  .muted {
    color: var(--pico-muted-color);
  }
</style>


// File: ui/PasswordField.svelte
<script>
  export let id = "password";
  export let label = "Password";
  export let value = "";
  export let placeholder = "";
  export let required = false;
  export let showMeter = false; // default off to match your working screen
  let show = false;

  $: score = strength(value);
  function strength(pwd) {
    const l = pwd.length,
      lo = /[a-z]/.test(pwd),
      up = /[A-Z]/.test(pwd),
      n = /\d/.test(pwd),
      s = /[^A-Za-z0-9]/.test(pwd);
    let k = 0;
    if (l >= 8) k++;
    if (l >= 12) k++;
    if (lo && up) k++;
    if (n) k++;
    if (s) k++;
    return {
      k,
      pct: Math.min(100, (k / 5) * 100),
      label:
        k >= 4 ? "Strong" : k === 3 ? "Good" : k === 2 ? "Weak" : "Very weak",
    };
  }
</script>

{#if label}<label for={id}>{label}</label>{/if}

{#if show}
  <input
    {id}
    type="text"
    bind:value
    {placeholder}
    {required}
    aria-describedby={showMeter ? `${id}-meter ${id}-hint` : null}
  />
{:else}
  <input
    {id}
    type="password"
    bind:value
    {placeholder}
    {required}
    aria-describedby={showMeter ? `${id}-meter ${id}-hint` : null}
  />
{/if}

<label class="label-inline">
  <input type="checkbox" bind:checked={show} />
  Show Password
</label>

{#if showMeter}
  <div
    id={`${id}-meter`}
    style="height:6px;background:var(--pico-muted-border-color);border-radius:999px;overflow:hidden;margin-top:.5rem;"
  >
    <div
      style={`height:100%;width:${score.pct}%;background:var(--pico-primary);`}
    ></div>
  </div>
  <small id={`${id}-hint`}
    >{score.label}. Use 12+ chars, mix case, numbers, symbol.</small
  >
{/if}


// File: ui/TextField.svelte
<script>
  export let id;
  export let label = "";
  export let type = "text"; // "text" | "email" | "tel" | "password"
  export let value = "";
  export let placeholder = "";
  export let autocomplete = undefined;
  export let required = false;
  export let invalid = false;
  export let hint = ""; // optional helper text
</script>

{#if label}<label for={id}>{label}</label>{/if}

{#if type === "email"}
  <input
    {id}
    type="email"
    bind:value
    {placeholder}
    {autocomplete}
    {required}
    aria-invalid={invalid}
    aria-describedby={hint ? `${id}-hint` : null}
  />
{:else if type === "tel"}
  <input
    {id}
    type="tel"
    bind:value
    {placeholder}
    {autocomplete}
    {required}
    aria-invalid={invalid}
    aria-describedby={hint ? `${id}-hint` : null}
  />
{:else if type === "password"}
  <input
    {id}
    type="password"
    bind:value
    {placeholder}
    {autocomplete}
    {required}
    aria-invalid={invalid}
    aria-describedby={hint ? `${id}-hint` : null}
  />
{:else}
  <input
    {id}
    type="text"
    bind:value
    {placeholder}
    {autocomplete}
    {required}
    aria-invalid={invalid}
    aria-describedby={hint ? `${id}-hint` : null}
  />
{/if}

{#if hint}<small id={`${id}-hint`}>{hint}</small>{/if}


// File: ui/Toast.svelte
<script>
  import { onMount } from "svelte";
  export let message = "";
  export let type = "info"; // info | success | error
  export let duration = 3000;
  let visible = false;
  let timer;

  onMount(() => {
    if (message) show();
  });

  function show() {
    visible = true;
    clearTimeout(timer);
    timer = setTimeout(() => (visible = false), duration);
  }

  $: if (message) show();
</script>

{#if visible}
  <aside class={`toast ${type}`} role="status" aria-live="polite">
    {message}
  </aside>
{/if}

<style>
  .toast {
    position: fixed;
    bottom: 1rem;
    right: 1rem;
    padding: 0.8rem 1.2rem;
    border-radius: 0.7rem;
    background: var(--pico-card-background-color);
    box-shadow: var(--pico-shadow);
    z-index: 1000;
  }
  .toast.info {
    border-left: 4px solid var(--pico-primary);
  }
  .toast.success {
    border-left: 4px solid var(--pico-secondary);
  }
  .toast.error {
    border-left: 4px solid var(--pico-del-color);
  }
</style>