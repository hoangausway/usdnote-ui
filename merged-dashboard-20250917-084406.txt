// File: App.svelte
<script>
  import "./router.js";
  import HeaderBar from "./components/HeaderBar.svelte";
  import BottomBar from "./components/BottomBar.svelte";
  import SidePanel from "./components/SidePanel.svelte";
  import { isAuthed } from "./stores/auth.js";

  let user = { name: "Hoang Nguyen", email: "hoang@example.com" };

  let drawerOpen = false; // NEW

  // Left panel nav — tweak as needed
  const items = [
    { label: "Dashboard", href: "/dashboard", icon: "home" },
    { label: "Activities", href: "/activities", icon: "market" },
    { label: "Buy Coins", href: "/buy", icon: "trade" },
    { label: "Send Coins", href: "/send", icon: "arrow" },
    { label: "Redeem Coins", href: "/redeem", icon: "plus" },
    { label: "Set Wallet Keys", href: "/walletkey", icon: "settings" },
  ];
  const footerItems = [
    { label: "Settings", href: "/settings", icon: "settings" },
    { label: "Help", href: "/help", icon: "help" },
    { label: "Sign out", href: "/logout", icon: "logout" },
  ];
</script>

<main class="pico">
  <HeaderBar
    isAuthed={$isAuthed}
    menuExpanded={drawerOpen}
    on:menu={() => (drawerOpen = true)}
  />
  <section class="main container" style="padding:1rem 0;">
    <div id="view"></div>
  </section>

  <BottomBar />

  <!-- Drawer -->
  <!-- <SidePanel bind:open={drawerOpen} title="Menu" items={navItems} /> -->
  <SidePanel
    bind:open={drawerOpen}
    title="USDNote™"
    {items}
    {footerItems}
    {user}
  />
</main>


// File: components/Avatar.svelte
<script>
  export let name = "";
  export let email = "";
  export let size = 36; // px

  function initials(n, e) {
    const base = (n && n.trim()) || (e && e.split("@")[0]) || "";
    const parts = base.toUpperCase().split(/\s+/).filter(Boolean);
    if (parts.length >= 2) return `${parts[0][0]}${parts[1][0]}`;
    const clean = base.replace(/[^A-Z0-9]/gi, "");
    return (clean.slice(0, 2) || "U").toUpperCase();
  }
</script>

<div class="avatar" style={`--size:${size}px`} aria-label={name || email}>
  {initials(name, email)}
</div>

<style>
  .avatar {
    inline-size: var(--size);
    block-size: var(--size);
    border-radius: 50%;
    display: grid;
    place-items: center;
    font-weight: 700;
    letter-spacing: 0.5px;
    background: color-mix(in srgb, var(--pico-primary), #000 5%);
    color: var(--pico-primary-inverse);
    user-select: none;
  }
</style>


// File: components/BottomBar.svelte
<footer class="bottom container">
  <small>© {new Date().getFullYear()} USDNote™</small>
  <span class="spacer"></span>
  <nav>
    <a href="/privacy">Privacy</a>
    <a href="/terms">Terms</a>
  </nav>
</footer>

<style>
  .bottom {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding-block: 1rem;
    border-top: 1px solid var(--pico-muted-border-color);
    margin-top: 2rem;
  }
  .bottom nav {
    display: inline-flex;
    gap: 0.75rem;
  }
  .spacer {
    margin-inline-start: auto;
  }
</style>


// File: components/GetStartButton.svelte
<!-- GetStartButton.svelte -->
<script>
  import page from "page";
  function handleClick() {
    page("/signup");
  }
</script>

<button class="getstart" on:click={handleClick}> Get Start </button>

<style>
  .getstart {
    border: none;
    width: 8rem;
    padding: 0.75rem 1rem;
    border-radius: 6px;
    background: var(--brand-amber-600);
    color: white;
    font-weight: 600;
    cursor: pointer;
    transition: background 0.2s ease;
  }
  .getstart:hover {
    background: var(--brand-amber-500);
  }
</style>


// File: components/HeaderBar.svelte
<script>
  import { createEventDispatcher } from "svelte";
  import MenuButton from "./MenuButton.svelte";
  import USDNoteLogo from "./USDNoteLogo.svelte";
  const dispatch = createEventDispatcher(); /* NEW */

  export let logoHref = "/";
  export let isAuthed = false;

  export let menuExpanded = false;

  function openMenu() {
    dispatch("menu");
  } /* NEW */
</script>

<header class="bar container">
  <a class="brand" href={logoHref}>USDNote</a>

  <nav class="right">
    {#if isAuthed}
      <MenuButton
        tone="auto"
        controls="app-drawer"
        expanded={menuExpanded}
        on:click={openMenu}
      />
    {:else}
      <a href="/signup" role="button">Sign up</a>
      <a href="/login" role="button" class="contrast">Log in</a>
    {/if}
  </nav>
</header>

<style>
  .bar {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding-block: 0.75rem;
    border-bottom: 1px solid var(--pico-muted-border-color);
  }
  .brand {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    text-decoration: none;
    font-weight: 600;
    font-size: 2rem;
    color: var(--brand-amber-800);
  }
  .brand img {
    height: 28px;
    width: auto;
    display: block;
  }
  .right {
    margin-inline-start: auto;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
  }
  .icon.ghost {
    background: transparent;
    border: 1px solid var(--pico-muted-border-color);
    padding: 0.4rem 0.6rem;
    border-radius: 0.6rem;
  }
  .sr {
    position: absolute;
    inline-size: 1px;
    block-size: 1px;
    overflow: hidden;
    white-space: nowrap;
    clip: rect(0, 0, 0, 0);
  }
</style>


// File: components/Icon.svelte
<script>
  export let name = "arrow";
  const paths = {
    home: "M3 11l9-8 9 8v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z M9 22V12h6v10",
    wallet:
      "M3 7h16a2 2 0 0 1 2 2v1H15a2 2 0 0 0 0 4h6v1a2 2 0 0 1-2 2H3z M15 12h8",
    trade: "M7 17V7M7 7L4 10M7 7l3 3M17 7v10m0 0 3-3m-3 3-3-3",
    swap: "M4 7h11l-3-3M20 17H9l3 3",
    bundle: "M6 6h12v12H6z M9 9h6v6H9z",
    nft: "M12 2l7 4v8l-7 4-7-4V6z M9 8h6v8H9z",
    otc: "M4 7h16M4 12h16M4 17h16",
    market: "M4 17l4-5 3 3 5-7 4 5",
    account: "M12 7a3 3 0 1 1 0 6 3 3 0 0 1 0-6zm-6 12a6 6 0 1 1 12 0z",
    settings: "M12 8a4 4 0 1 1 0 8 4 4 0 0 1 0-8",
    help: "M12 18h.01M9 9a3 3 0 1 1 6 1c0 2-3 2-3 5",
    logout: "M10 17l-5-5 5-5M5 12h12M17 7v10",
    plus: "M12 5v14M5 12h14",
    arrow: "M5 12h14M13 5l7 7-7 7",
  };
</script>

<svg
  width="22"
  height="22"
  viewBox="0 0 24 24"
  fill="none"
  stroke="currentColor"
  stroke-width="2"
  stroke-linecap="round"
  stroke-linejoin="round"
  aria-hidden="true"
>
  <path d={paths[name] || paths.arrow} />
</svg>


// File: components/MenuButton.svelte
<script>
  // A11y-friendly hamburger button with good contrast in light/dark.
  import { createEventDispatcher } from "svelte";
  const dispatch = createEventDispatcher(); /* NEW */

  // Props
  export let expanded = false; // reflect drawer state
  export let controls = undefined; // id of the drawer element
  export let tone = "auto"; // "auto" | "brand" | "inverse"
  export let size = 44; // tap target (px)
  export let labelOpen = "Open menu";
  export let labelClose = "Close menu";

  // choose foreground color based on tone
  $: fg =
    tone === "brand"
      ? "var(--pico-primary)"
      : tone === "inverse"
        ? "var(--pico-primary-inverse)"
        : "var(--pico-text-color)"; // default: high-contrast text

  $: ariaLabel = expanded ? labelClose : labelOpen;

  function handleClick() {
    // forward a 'click' event so <MenuButton on:click={...}/> works
    dispatch("click");
  }
</script>

<button
  type="button"
  class="menu-btn"
  aria-label={ariaLabel}
  aria-controls={controls}
  aria-expanded={expanded}
  style={`--mb-size:${size}px; --mb-fg:${fg};`}
  on:click={handleClick}
  {...$$restProps}
>
  {#if expanded}
    <!-- close (X) icon -->
    <svg
      width="22"
      height="22"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
    >
      <path d="M18 6L6 18M6 6l12 12" />
    </svg>
  {:else}
    <!-- hamburger icon -->
    <svg
      width="22"
      height="22"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
    >
      <path d="M3 6h18M3 12h18M3 18h18" />
    </svg>
  {/if}
</button>

<style>
  :global(html[data-theme="dark"]) .menu-btn {
    color: var(--pico-primary); /* amber icon on dark bg */
    border-color: color-mix(in srgb, var(--pico-primary), transparent 70%);
  }
  :global(html[data-theme="dark"]) .menu-btn:hover {
    background: color-mix(in srgb, var(--pico-primary), transparent 90%);
  }
  .menu-btn {
    /* visual */
    color: var(--mb-fg);
    background: transparent;
    border: 1px solid color-mix(in srgb, var(--mb-fg), transparent 70%);
    border-radius: 0.6rem;

    /* layout & ergonomics */
    min-inline-size: var(--mb-size);
    min-block-size: 40px;
    display: inline-grid;
    place-items: center;
    cursor: pointer;
  }

  .menu-btn:hover {
    background: color-mix(in srgb, var(--mb-fg), transparent 92%);
  }

  .menu-btn:focus-visible {
    outline: 2px solid var(--pico-primary-focus);
    outline-offset: 2px;
  }

  .menu-btn[disabled] {
    opacity: 0.6;
    cursor: not-allowed;
  }
</style>


// File: components/SidePanel.svelte
<script>
  import { tick } from "svelte";
  import Icon from "./Icon.svelte";
  import page from "page"; // ✅ add this
  import { logout } from "../stores/auth.js"; // ✅ import logout

  // ===== Props =====
  export let id = "app-drawer"; // match Header MenuButton aria-controls
  export let open = false; // bind:open from parent
  export let title = "Menu"; // for aria-labelledby
  export let logoText = "USDNote";
  export let logoSrc = ""; // optional brand image src
  export let width = 340; // px

  // item: { label, href, icon?, badge?, active? } or { separator: true }
  export let items = [];
  export let sections = null; // [{ heading?, items:[...] }]
  export let footerItems = [];
  export let activeHref = ""; // highlight current route
  export let user = null; // { name, email }

  let panel;
  let prevFocus;

  function handleFooterClick(it, e) {
    if (it.href === "/logout") {
      e.preventDefault();
      logout(); // ✅ call store logout
      close(); // ✅ close panel
      page("/"); // ✅ redirect home
    }
  }

  function close() {
    open = false;
  }

  async function focusFirst() {
    await tick();
    const first = panel?.querySelector(
      "a,button,[tabindex]:not([tabindex='-1'])"
    );
    if (first) first.focus();
    else panel?.focus?.(); // fallback: focus dialog itself
  }

  // Lock scroll + move/restore focus when `open` changes
  $: {
    const html = document.documentElement;
    if (open) {
      prevFocus = document.activeElement;
      html.classList.add("no-scroll");
      focusFirst();
    } else {
      html.classList.remove("no-scroll");
      prevFocus && prevFocus.focus?.();
    }
  }

  // ESC to close
  function onKeydown(e) {
    if (open && e.key === "Escape") close();
  }
</script>

<svelte:window on:keydown={onKeydown} />

{#if open}
  <!-- Scrim (button for a11y) -->
  <button
    class="scrim"
    type="button"
    aria-label="Close menu"
    on:click={close}
  />

  <!-- Focus sentinel (start) -->
  <!-- <div
    tabindex="0"
    on:focus={() => {
      const t = panel?.querySelector(".icon.close, .p-nav a, .p-foot a");
      (t || panel)?.focus?.();
    }}
  /> -->

  <aside
    bind:this={panel}
    {id}
    role="dialog"
    aria-modal="true"
    aria-labelledby="panel-title"
    class="panel"
    tabindex="-1"
    style={`--w:${width}px`}
  >
    <!-- Header: brand + close -->
    <header class="p-head">
      <div class="brand">
        {#if logoSrc}<img src={logoSrc} alt={`${logoText} logo`} />{/if}
        <span id="panel-title" class="t">{title || logoText}</span>
      </div>
      <!-- <button
        class="icon close"
        type="button"
        aria-label="Close menu"
        on:click={close}>×</button
      > -->
    </header>

    <!-- Primary navigation -->
    <nav class="p-nav" aria-label="Primary" on:click={close}>
      {#if sections}
        {#each sections as sec}
          {#if sec.heading}<div class="sec">{sec.heading}</div>{/if}
          {#each sec.items as it}
            {#if it.separator}
              <hr />
            {:else}
              <a
                class="nav-item"
                class:active={it.active ||
                  (activeHref && it.href === activeHref)}
                href={it.href}
              >
                <span class="ic" aria-hidden="true"
                  >{#if it.icon}<Icon name={it.icon} />{/if}</span
                >
                <span class="lbl">{it.label}</span>
                {#if it.badge}<span class="badge">{it.badge}</span>{/if}
              </a>
            {/if}
          {/each}
        {/each}
      {:else}
        {#each items as it}
          {#if it.separator}
            <hr />
          {:else}
            <a
              class="nav-item"
              class:active={it.active || (activeHref && it.href === activeHref)}
              href={it.href}
            >
              <span class="ic" aria-hidden="true"
                >{#if it.icon}<Icon name={it.icon} />{/if}</span
              >
              <span class="lbl">{it.label}</span>
              {#if it.badge}<span class="badge">{it.badge}</span>{/if}
            </a>
          {/if}
        {/each}
      {/if}
    </nav>

    <!-- User card (optional) -->
    {#if user}
      <section class="u-card">
        <div class="u-text">
          <strong>{user.name || "User"}</strong>
          <small class="muted">{user.email}</small>
        </div>
      </section>
    {/if}

    <!-- Footer links -->
    {#if footerItems && footerItems.length}
      <footer class="p-foot" aria-label="Secondary" on:click={close}>
        {#each footerItems as it}
          {#if it.separator}
            <hr />
          {:else}
            <a
              class="nav-item"
              href={it.href}
              on:click={(e) => handleFooterClick(it, e)}
            >
              <span class="ic" aria-hidden="true">
                {#if it.icon}<Icon name={it.icon} />{/if}
              </span>
              <span class="lbl">{it.label}</span>
            </a>
          {/if}
        {/each}
      </footer>
    {/if}
  </aside>

  <!-- Focus sentinel (end) -->
  <div
    tabindex="0"
    on:focus={() => (panel || document.activeElement)?.focus?.()}
  />
{/if}

<style>
  /* ---------- Overlay ---------- */
  .scrim {
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.45);
    backdrop-filter: blur(2px);
    z-index: 9998;
    border: 0;
    padding: 0;
  }

  /* ---------- Panel (single source of truth) ---------- */
  .panel {
    position: fixed;
    inset-block: 0;
    inset-inline-start: 0;
    inline-size: min(var(--w), 86vw);
    display: grid;
    grid-template-rows: auto auto 1fr auto;
    gap: 0.75rem;
    padding: 0.9rem;
    z-index: 9999;

    /* Theme hooks — derive from Pico tokens */
    --sp-accent: var(--pico-primary);
    --sp-bg: var(--brand-jade-700);
    --sp-fg: var(--pico-primary-inverse); /* <- panel text color */
    --sp-sep: color-mix(in srgb, var(--sp-fg), transparent 65%);

    background: var(--sp-bg);
    color: var(--sp-fg);

    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.45);
    border-right: 1px solid color-mix(in srgb, var(--sp-fg), transparent 80%);

    animation: slideIn 0.18s ease-out;
  }

  /* Ensure black text in DARK theme per your requirement */
  :global(html[data-theme="dark"]) .panel {
    --sp-fg: #000; /* force black text on amber in dark mode */
  }

  @keyframes slideIn {
    from {
      transform: translateX(-10%);
      opacity: 0.9;
    }
    to {
      transform: none;
      opacity: 1;
    }
  }
  @media (prefers-reduced-motion: reduce) {
    .panel {
      animation: none;
    }
  }

  /* ---------- Typography + link reset (inherit panel color) ---------- */
  .panel
    :is(h1, h2, h3, h4, h5, h6, p, small, strong, em, span, li, div, button) {
    color: inherit;
  }
  .panel a,
  .panel a:link,
  .panel a:visited {
    color: inherit;
    text-decoration-color: color-mix(in srgb, currentColor, transparent 60%);
  }
  .panel a:hover {
    background: color-mix(in srgb, currentColor, transparent 93%);
  }
  .panel a:focus-visible {
    outline: 2px solid color-mix(in srgb, var(--sp-accent), currentColor 10%);
    outline-offset: 2px;
  }

  /* ---------- Header ---------- */
  .p-head {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }
  .brand {
    display: flex;
    align-items: center;
    gap: 0.6rem;
  }
  .brand img {
    height: 22px;
    width: auto;
    display: block;
    filter: drop-shadow(0 1px 0 rgba(0, 0, 0, 0.2));
  }
  .brand .t {
    font-weight: 600;
    letter-spacing: 0.2px;
  }

  /* ---------- User card ---------- */
  .u-card {
    display: grid;
    grid-template-columns: auto 1fr;
    gap: 0.75rem;
    align-items: center;
    padding: 0.6rem 0.5rem;
    background: color-mix(in srgb, var(--sp-accent), transparent 90%);
    border: 1px solid color-mix(in srgb, var(--sp-accent), transparent 75%);
    border-radius: 0.8rem;
  }
  .u-text strong {
    display: block;
  }
  .muted {
    color: color-mix(in srgb, var(--sp-fg), transparent 25%);
  }

  /* ---------- Section heading ---------- */
  .sec {
    margin: 0.75rem 0.25rem 0.25rem;
    color: color-mix(in srgb, var(--sp-fg), transparent 30%);
    font-size: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.08em;
  }

  /* ---------- Nav list ---------- */
  .p-nav {
    overflow: auto;
    padding-inline: 0.1rem;
  }
  .nav-item {
    display: grid;
    grid-template-columns: 24px 1fr auto;
    align-items: center;
    gap: 0.7rem;
    padding: 0.6rem 0.5rem;
    border-bottom: 1px solid color-mix(in srgb, var(--sp-fg), transparent 75%);
    text-decoration: none;
    position: relative;
  }
  .nav-item:hover {
    background: color-mix(in srgb, currentColor, transparent 93%);
  }
  .nav-item:focus-visible {
    outline: 2px solid color-mix(in srgb, var(--sp-accent), currentColor 10%);
    outline-offset: 2px;
  }
  .nav-item.active {
    background: color-mix(in srgb, var(--sp-accent), transparent 85%);
    border-left: 3px solid var(--sp-accent);
  }

  .ic {
    inline-size: 24px;
    block-size: 24px;
    display: grid;
    place-items: center;
    color: inherit; /* icons follow text color (SVG uses currentColor) */
  }
  .ic :global(svg) {
    display: block;
  }

  .lbl {
    font-weight: 200;
  }

  .badge {
    justify-self: end;
    font-size: 0.72rem;
    padding: 0.12rem 0.42rem;
    border-radius: 999px;
    background: color-mix(in srgb, var(--sp-fg), transparent 90%);
    border: 1px solid color-mix(in srgb, var(--sp-accent), transparent 70%);
    color: inherit;
  }

  /* ---------- Separators ---------- */
  .panel .p-nav hr,
  .panel .p-foot hr {
    border: 0;
    height: 1px;
    background: var(--sp-sep);
    opacity: 1;
    margin: 0.6rem 0.25rem;
    border-radius: 999px;
  }

  /* ---------- Footer ---------- */
  .p-foot {
    border-top: 1px solid var(--sp-sep);
    padding-top: 0.6rem;
    display: grid;
    gap: 0.25rem;
  }
</style>


// File: components/ThemeSwitcher.svelte
<script>
  import { onMount, onDestroy } from "svelte";

  const MEDIA = "(prefers-color-scheme: dark)";
  let mode = "dark"; // "auto" | "light" | "dark"
  let mql;

  const effective = () => (window.matchMedia(MEDIA).matches ? "dark" : "light");

  const apply = (m) => {
    const theme = m === "auto" ? effective() : m;
    document.documentElement.setAttribute("data-theme", theme);
  };

  function setMode(next) {
    mode = next;
    localStorage.setItem("theme-mode", next);
    apply(next);
  }

  function onMediaChange() {
    if (mode === "auto") apply("auto");
  }

  onMount(() => {
    const saved = localStorage.getItem("theme-mode");
    mode = saved || "auto";
    mql = window.matchMedia(MEDIA);
    mql.addEventListener?.("change", onMediaChange);
    apply(mode);
  });

  onDestroy(() => {
    mql?.removeEventListener?.("change", onMediaChange);
  });
</script>

<nav aria-label="Theme switcher">
  <ul class="theme-switcher">
    <li>
      <details class="dropdown">
        <summary class="secondary">Theme</summary>
        <!-- svelte-ignore a11y-invalid-attribute -->
        <ul>
          <li>
            <a
              href="#"
              data-theme-switcher="auto"
              on:click={() => setMode("auto")}>Auto</a
            >
          </li>
          <li>
            <a
              href="#"
              data-theme-switcher="light"
              on:click={() => setMode("light")}>Light</a
            >
          </li>
          <li>
            <a
              href="#"
              data-theme-switcher="dark"
              on:click={() => setMode("dark")}>Dark</a
            >
          </li>
        </ul>
      </details>
    </li>
  </ul>
</nav>

<style>
  .theme-switcher {
    display: flex;
    gap: 0.5rem;
    align-items: center;
  }
</style>


// File: components/Typewriter.svelte
<script>
  import { createEventDispatcher } from "svelte";

  // Props
  export let text = "";
  export let speed = 16; // ms per character
  export let threshold = 0.2; // % of element visible before starting

  // Internals
  let span; // span element to display typed text
  let caretActive = false;
  let observer;
  let timer;
  let index = 0;

  const dispatch = createEventDispatcher();

  function startTyping() {
    stopTyping(); // reset any previous run
    index = 0;
    span.textContent = "";
    caretActive = true;
    dispatch("start");

    timer = setInterval(() => {
      span.textContent = text.slice(0, ++index);
      if (index >= text.length) {
        stopTyping(true);
        dispatch("done");
      }
    }, speed);
  }

  function stopTyping(finished = false) {
    clearInterval(timer);
    caretActive = !finished; // blink while typing; hide after done
    if (!finished) span.textContent = "";
  }

  function setupObserver(node) {
    observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) startTyping();
        else stopTyping(false);
      },
      { threshold }
    );

    observer.observe(node);

    return {
      destroy() {
        observer.disconnect();
        stopTyping();
      },
    };
  }
</script>

<h2 use:setupObserver>
  <span bind:this={span}></span>
  <span class="caret" class:active={caretActive} aria-hidden="true"></span>
</h2>

<style>
  h2 {
    position: relative;
    line-height: 1.3;
    color: navy;
  }

  .caret {
    display: inline-block;
    width: 2px;
    height: 1em;
    background: var(--brand-amber-600, #f59e0b);
    margin-left: 2px;
    vertical-align: -0.1em;
    opacity: 0;
  }

  .caret.active {
    animation: blink 1s step-end infinite;
    opacity: 1;
  }

  @keyframes blink {
    50% {
      opacity: 0;
    }
  }
</style>


// File: components/USDNoteLogo.svelte
<script>
  // Height in px; width auto-scales from the SVG viewBox
  export let size = 40;
  // Inherit from parent by default; override by passing color prop if needed
  export let color = "currentColor";
  // Optional accessible title; set to "" to omit
  export let title = "XSync";
  // Allow extra classes from parent
  export let className = "";
  // Svelte will forward any other attributes via $$restProps
  export let ariaLabel = "XSync logo";
</script>

<svg
  id="Layer_1"
  xmlns="http://www.w3.org/2000/svg"
  version="1.1"
  viewBox="0 0 1190.6 841.9"
  class={`xsync-logo ${className}`}
  role="img"
  aria-label={ariaLabel}
  style={`height:${size}px; color:${color};`}
  fill="currentColor"
  stroke="currentColor"
  {...$$restProps}
>
  {#if title}<title>{title}</title>{/if}

  <!-- BEGIN: paste the contents from /assets/xsync.svg (inside <svg>…</svg>) -->
  <path
    d="M247.9,380.8l92.6,136.2h-58.4l-29-42.8c-10.2-14.9-22-32.9-35.3-53.9-13.4,21.1-25.2,39.1-35.3,53.9l-29.4,42.8h-56.9l93.4-135.1-87.8-129.8h58l26.4,39.4c8.9,13.2,19.8,30.1,32.7,51,18.1-28,29.1-45,33.1-51l26.8-39.4h56.6l-87.4,128.7Z"
  />
  <path
    d="M425.7,522.9c-35.7,0-63.5-8-83.3-24-19.8-16-29.9-39.1-30.1-69.4h49.5c.2,19.6,6.1,33.3,17.7,41.1,11.5,7.8,27.5,11.7,47.8,11.7s30.6-3.3,39.8-9.9c9.2-6.6,13.8-16.1,13.8-28.5s-4-18.4-11.9-23.8c-7.9-5.5-22.1-10.3-42.4-14.5l-22.3-4.5c-56.8-10.7-85.2-37.5-85.2-80.4s8.6-40.7,25.9-54.3c17.2-13.6,41.4-20.5,72.4-20.5s62.4,7.6,80,22.7c17.6,15.1,26.9,35.8,27.9,62.1h-48.7c-1-14.9-6-26-14.9-33.3-8.9-7.3-23.4-11-43.5-11s-27.5,2.9-35.5,8.7c-8.1,5.8-12.1,13.8-12.1,24s3.7,18.9,11.2,24.6c7.4,5.7,21,10.5,40.6,14.5l23.1,4.5c31,6.2,53.4,15.5,67.2,27.9,13.8,12.4,20.6,29.3,20.6,50.6s-9.5,46.1-28.5,60.3c-19,14.1-45.2,21.2-78.7,21.2Z"
  />
  <path
    d="M666.1,325h49.1l-74,207.6c-7.7,21.3-17.6,36.3-29.8,44.8-12.2,8.6-29.8,12.8-52.8,12.8s-14.5-.4-20.5-1.1v-36.8h17.9c10.7,0,18.6-2.9,23.8-8.7,5.2-5.8,7.8-13.2,7.8-22.1s-3-21.8-8.9-38.7l-55.8-157.8h50.6l15.6,48c11.4,36.2,21.6,71.9,30.5,107.2,8.2-30.5,18.5-66.1,30.9-106.8l15.6-48.4Z"
  />
  <path
    d="M823.1,320.5c20.6,0,37,6,49.1,17.9,12.2,11.9,18.2,29,18.2,51.3v127.2h-46.9v-119.4c0-24.3-12-36.5-36.1-36.5s-21.4,4.1-29.9,12.3c-8.6,8.2-12.8,20.2-12.8,36.1v107.5h-46.9v-192h45.4v27.5c14.4-21.3,34.4-32,59.9-32Z"
  />
  <path
    d="M992.7,521.4c-28.5,0-51.5-9.1-68.8-27.3-17.4-18.2-26-42.6-26-73.1s8.6-54.9,25.9-73.1c17.2-18.2,40.2-27.3,69-27.3s45.5,6.6,61.4,19.9c15.9,13.3,25.2,31.2,27.9,53.8h-46.9c-2.2-11.4-7.1-20-14.7-25.9-7.6-5.8-16.8-8.7-27.7-8.7s-25.8,5.2-34.2,15.4c-8.4,10.3-12.6,25.6-12.6,45.9s4.3,35.7,12.8,45.9c8.6,10.3,19.9,15.4,34,15.4s20.7-3.1,28.6-9.3c7.9-6.2,12.8-15.4,14.5-27.5h46.9c-2.5,23.3-11.9,41.8-28.3,55.4-16.4,13.6-37,20.5-61.8,20.5Z"
  />
  <!-- END -->
</svg>

<style>
  .xsync-logo {
    display: inline-block;
    vertical-align: middle;
  }
</style>


// File: components/UserMenu.svelte
<script>
  export let items = [
    { label: "Dashboard", href: "/dashboard" },
    { label: "Profile", href: "/profile" },
    { label: "Settings", href: "/settings" },
    { separator: true },
    { label: "Sign out", href: "/logout" }, // UI-only
  ];
  export let summary = "Menu";
</script>

<details class="dropdown">
  <summary class="secondary">{summary}</summary>
  <ul>
    {#each items as item}
      {#if item.separator}
        <li><hr /></li>
      {:else}
        <li><a href={item.href}>{item.label}</a></li>
      {/if}
    {/each}
  </ul>
</details>


// File: main.js
// Set default theme to 'dark'
const saved = localStorage.getItem("theme-mode");
document.documentElement.dataset.theme = saved || "light";

// Global CSS
import "@picocss/pico/css/pico.min.css"; // Pico (class-based)
import "./styles/global.css"; // Global CSS
import "./styles/form.css";
import "./styles/tokens.css"; // Optional theming tokens

import App from "./App.svelte";

new App({ target: document.getElementById("app") });


// File: pages/Dashboard.svelte
<section class="card">
  <hgroup>
    <h2>Welcome to USDNote</h2>
    <p>Svelte + Vite + page.js + PicoCSS</p>
  </hgroup>
  <p>
    Use the navigation to open the <strong>Playground</strong> and preview components
    & Pico styling.
  </p>
  <a href="/playground" role="button">Open Playground</a>
</section>


// File: pages/Home_.svelte
<script>
  // Smooth-scroll helper for in-page anchors
  function go(id) {
    const el = document.getElementById(id);
    if (el) el.scrollIntoView({ behavior: "smooth", block: "start" });
  }
</script>

<!-- Hero -->
<section class="hero container">
  <div class="hero-art" aria-hidden="true">
    <!-- Animated “coins” -->
    <svg class="coin c1" viewBox="0 0 64 64" role="img" aria-label="USD coin">
      <circle cx="32" cy="32" r="30" class="coin-bg" />
      <text x="50%" y="52%" text-anchor="middle" class="coin-txt">$</text>
    </svg>
    <svg class="coin c2" viewBox="0 0 64 64" role="img" aria-label="Lock coin">
      <circle cx="32" cy="32" r="30" class="coin-bg" />
      <path d="M22 32h20v14H22z M26 32v-6a6 6 0 0 1 12 0v6" class="lock" />
    </svg>
    <svg class="coin c3" viewBox="0 0 64 64" role="img" aria-label="Microchain">
      <circle cx="20" cy="32" r="6" class="node" />
      <circle cx="44" cy="20" r="6" class="node" />
      <circle cx="44" cy="44" r="6" class="node" />
      <path d="M25 30 L39 22 M25 34 L39 42" class="edge" />
    </svg>
  </div>

  <div class="hero-copy">
    <h1>USDNote™ - the easiest way to access and earn from U.S. Treasuries</h1>
    <p class="lead">
      Dividend-paying fractional investment rails—powered by
      <em>Microchains™</em> for fast, private, auditable transfers.
    </p>
    <div class="cta">
      <a href="/signup" role="button" class="primary">Get started</a>
    </div>
  </div>
</section>

<!-- Section: USDNote -->
<section id="usdnote" class="container">
  <article class="card reveal bg-amber">
    <header>
      <h2>USDNote™ — A Dividend-Paying Stablecoin</h2>
      <p class="muted">
        A USD-linked note backed by U.S. Treasuries; interest is distributed as
        dividends.
      </p>
    </header>

    <div class="grid cols-illustration">
      <div>
        <h3>Strengths</h3>
        <ul>
          <li>
            <strong>Treasury-backed yield</strong> → dividends from interest on U.S.
            Treasuries.
          </li>
          <li>
            <strong>First of its kind</strong> among mainstream stablecoin models.
          </li>
          <li>
            <strong>LockCoin™ Microchains™</strong> for high-throughput transactions.
          </li>
          <li>
            <strong>Anonymous dividend distribution</strong> with compliance alignment.
          </li>
          <li><strong>Easy entry</strong> — email or phone onboarding.</li>
          <li>
            <strong>Regulatory posture</strong> — U.S. registered issuer for transparency.
          </li>
        </ul>

        <h3>Potential Concerns</h3>
        <ul>
          <li>
            <strong>Regulatory risk</strong> — dividend features may be treated as
            securities.
          </li>
          <li>
            <strong>Scalability & liquidity</strong> — adoption depth affects usability.
          </li>
          <li>
            <strong>Anon vs. compliance</strong> — AML/KYC design must be carefully
            balanced.
          </li>
        </ul>

        <div class="inline-ctas">
          <a href="/signup" role="button">Create account</a>
          <a href="/playground" class="secondary">Try the UI playground</a>
        </div>
      </div>

      <!-- Illustration: yield into dividends -->
      <div class="illus">
        <svg
          viewBox="0 0 360 220"
          class="illus-svg"
          aria-label="Treasury yield to dividends"
        >
          <defs>
            <linearGradient id="grad" x1="0" x2="1">
              <stop offset="0%" stop-color="var(--pico-primary)" />
              <stop
                offset="100%"
                stop-color="color-mix(in srgb, var(--pico-primary), #fff 30%)"
              />
            </linearGradient>
          </defs>
          <rect x="10" y="20" width="140" height="70" rx="10" class="box" />
          <text x="80" y="60" text-anchor="middle" class="lbl"
            >U.S. Treasuries</text
          >

          <path d="M150 55 C 190 55, 190 110, 230 110" class="flow" />
          <rect x="230" y="90" width="120" height="40" rx="10" class="box" />
          <text x="290" y="115" text-anchor="middle" class="lbl">Yield</text>

          <path d="M290 130 C 280 160, 240 180, 200 190" class="flow" />
          <circle cx="190" cy="190" r="8" class="coin-dot" />
          <circle cx="210" cy="185" r="8" class="coin-dot" />
          <circle cx="170" cy="185" r="8" class="coin-dot" />
          <text x="180" y="210" text-anchor="middle" class="lbl small"
            >Dividends → Holders</text
          >
        </svg>
      </div>
    </div>
  </article>
</section>

<!-- Section: Fractional Investment (LockCoin) -->
<section id="lockcoin" class="container">
  <article class="card reveal">
    <header>
      <h2>Fractional Investment Ecosystem — LockCoin™</h2>
      <p class="muted">
        Tokenize equity, debt, or real-world assets; enable P2P trading,
        dividends, and governance.
      </p>
    </header>

    <div class="grid cols-illustration">
      <div>
        <h3>Strengths</h3>
        <ul>
          <li>
            <strong>Issue native coins</strong> for fractional ownership or financing.
          </li>
          <li>
            <strong>Direct P2P trading</strong> — minimize intermediaries.
          </li>
          <li>
            <strong>Built-in dividend distribution</strong> for transparent earnings.
          </li>
          <li><strong>Governance rights</strong> — token-based voting.</li>
        </ul>

        <h4>Use cases</h4>
        <ul>
          <li>Real-estate tokenization (fractional property shares)</li>
          <li>Equity & debt issuance for startups/SMEs</li>
          <li>Global SME financing with programmable rules</li>
        </ul>

        <h3>Potential Concerns</h3>
        <ul>
          <li><strong>Market adoption</strong> and ecosystem trust.</li>
          <li>
            <strong>Security risks</strong> — strong cryptographic and ops controls.
          </li>
          <li>
            <strong>Regulatory fragmentation</strong> across jurisdictions.
          </li>
        </ul>
      </div>

      <!-- Illustration: tokenized asset graph -->
      <div class="illus">
        <svg
          viewBox="0 0 360 220"
          class="illus-svg"
          aria-label="Tokenized asset network"
        >
          <g class="pulse">
            <circle cx="180" cy="110" r="16" class="hub" />
            <text x="180" y="114" text-anchor="middle" class="lbl small"
              >Asset</text
            >
          </g>
          <g>
            <circle cx="70" cy="60" r="12" class="node" />
            <circle cx="290" cy="60" r="12" class="node" />
            <circle cx="70" cy="170" r="12" class="node" />
            <circle cx="290" cy="170" r="12" class="node" />
            <path d="M180 110 L70 60" class="edge" />
            <path d="M180 110 L290 60" class="edge" />
            <path d="M180 110 L70 170" class="edge" />
            <path d="M180 110 L290 170" class="edge" />
          </g>
        </svg>
      </div>
    </div>
  </article>
</section>

<!-- Verdict / CTA -->
<section class="container">
  <article class="card verdict reveal">
    <p>
      <strong>USDNote™ and LockCoin™</strong> present an ambitious financial innovation:
      combining stable-value digital money with yield distribution and decentralized
      asset tokenization.
    </p>
    <ul>
      <li>
        <strong>Strongest value</strong>: democratize access—Treasury-backed
        returns and fractional ownership.
      </li>
      <li>
        <strong>Key challenges</strong>: regulation, liquidity, and adoption at
        scale.
      </li>
    </ul>
    <div class="inline-ctas">
      <a href="/signup" role="button" class="primary">Open an account</a>
      <a href="/login" role="button" class="secondary">Log in</a>
    </div>
  </article>
</section>

<!-- Mini FAQ -->
<section class="container">
  <article class="card reveal">
    <h2>FAQs</h2>
    <details>
      <summary>How are dividends handled?</summary>
      <p>
        Interest from backing Treasuries is pooled and distributed to holders.
        Distribution flows are designed to preserve privacy while maintaining
        auditability.
      </p>
    </details>
    <details>
      <summary>Is USDNote a security?</summary>
      <p>
        Treatment may vary by jurisdiction due to dividend features. The product
        is designed with compliance in mind; always check local rules before
        participating.
      </p>
    </details>
    <details>
      <summary>What is Microchains™?</summary>
      <p>
        LockCoin’s transaction fabric emphasizing speed, privacy, and a public
        key-based audit trail rather than heavy consensus. It enables cash-like
        and check-like transfer modes.
      </p>
    </details>
  </article>
</section>

<!-- Footer CTA -->
<section class="container final-cta reveal">
  <div class="card cta">
    <h2>Ready to explore?</h2>
    <p>Start with a demo account, then upgrade when you’re ready.</p>
    <div class="cta-row">
      <a href="/playground" role="button" class="contrast">Try the Playground</a
      >
      <a href="/signup" role="button" class="primary">Get Started</a>
    </div>
  </div>
</section>

<style>
  /* Layout helpers */
  .cols-illustration {
    grid-template-columns: minmax(260px, 1fr) minmax(260px, 420px);
    align-items: center;
  }
  @media (max-width: 860px) {
    .cols-illustration {
      grid-template-columns: 1fr;
    }
  }

  /* Hero */
  .hero {
    position: relative;
    padding-top: 0.75rem;
    padding-bottom: 0.25rem;
  }
  .hero-copy h1 {
    font-size: clamp(1.6rem, 2vw + 1rem, 2.3rem);
    margin: 0 0 0.25rem;
  }
  .lead {
    color: var(--pico-muted-color);
    max-width: 70ch;
    margin: 0.25rem 0 0.75rem;
  }
  .cta {
    display: flex;
    gap: 0.6rem;
    flex-wrap: wrap;
  }
  .microcopy {
    font-size: 0.85rem;
    color: var(--pico-muted-color);
    margin-top: 0.35rem;
  }

  /* Animated hero art */
  .hero-art {
    position: absolute;
    inset: -10px 0 auto 0;
    height: 160px;
    pointer-events: none;
    opacity: 0.6;
    filter: drop-shadow(0 6px 14px rgba(0, 0, 0, 0.2));
  }
  .coin {
    position: absolute;
    width: 72px;
    height: 72px;
    animation: float 8s ease-in-out infinite;
  }
  .c1 {
    left: 6%;
    top: 10%;
    animation-duration: 7.2s;
  }
  .c2 {
    left: 22%;
    top: 28%;
    animation-duration: 8.6s;
  }
  .c3 {
    left: 38%;
    top: 8%;
    animation-duration: 7.8s;
  }
  @keyframes float {
    0%,
    100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-12px);
    }
  }
  .coin-bg {
    fill: color-mix(in srgb, var(--pico-primary), #000 8%);
  }
  .coin-txt {
    font:
      700 28px/1 ui-sans-serif,
      system-ui,
      sans-serif;
    fill: var(--pico-primary-inverse);
  }
  .lock {
    stroke: var(--pico-primary-inverse);
    stroke-width: 3;
    fill: none;
  }
  .node {
    fill: color-mix(in srgb, var(--pico-primary), #000 12%);
  }
  .edge {
    stroke: color-mix(in srgb, var(--pico-primary), #fff 10%);
    stroke-width: 3;
    fill: none;
  }

  /* Cards + reveal-on-scroll */
  .card {
    overflow: hidden;
  }
  .reveal {
    opacity: 0;
    transform: translateY(8px);
    animation: rise 0.6s ease-out forwards;
  }
  .reveal:nth-of-type(1) {
    animation-delay: 0.05s;
  }
  .reveal:nth-of-type(2) {
    animation-delay: 0.12s;
  }
  .reveal:nth-of-type(3) {
    animation-delay: 0.18s;
  }
  @media (prefers-reduced-motion: reduce) {
    .reveal {
      opacity: 1;
      transform: none;
      animation: none;
    }
    .coin {
      animation: none;
    }
  }
  @keyframes rise {
    to {
      opacity: 1;
      transform: none;
    }
  }

  /* Illustration styling */
  .illus {
    display: grid;
    place-items: center;
    padding: 0.5rem;
  }
  .illus-svg {
    max-width: 420px;
    width: 100%;
    height: auto;
  }
  .box {
    fill: color-mix(in srgb, var(--pico-primary), #000 90%);
  }
  .lbl {
    fill: var(--pico-primary-inverse);
    font:
      600 14px/1 ui-sans-serif,
      system-ui,
      sans-serif;
  }
  .lbl.small {
    font-weight: 500;
    font-size: 12px;
  }
  .flow {
    stroke: url(#grad);
    stroke-width: 4;
    fill: none;
  }
  .coin-dot {
    fill: color-mix(in srgb, var(--pico-primary), #000 8%);
  }
  .hub {
    fill: color-mix(in srgb, var(--pico-primary), #000 12%);
  }
  .node {
    fill: color-mix(in srgb, var(--pico-primary), #000 18%);
  }
  .edge {
    stroke: color-mix(in srgb, var(--pico-primary), #fff 12%);
    stroke-width: 3;
    fill: none;
  }
  .pulse .hub {
    animation: pulse 1.6s ease-in-out infinite;
  }
  @keyframes pulse {
    0%,
    100% {
      filter: drop-shadow(0 0 0 rgba(0, 0, 0, 0));
    }
    50% {
      filter: drop-shadow(
        0 0 10px color-mix(in srgb, var(--pico-primary), #fff 25%)
      );
    }
  }

  /* Verdict & final CTA */
  .verdict ul {
    margin-top: 0.25rem;
  }
  .final-cta .cta {
    text-align: center;
  }
  .final-cta .cta-row {
    display: flex;
    gap: 0.6rem;
    justify-content: center;
    flex-wrap: wrap;
  }

  /* Buttons: optional outline helper */
  .outline {
    background: transparent;
    border: 1px solid var(--pico-muted-border-color);
  }
  /* ==== Card background utilities (light & dark aware) ==== */
  /* Soft brand tint on default surface */
  .card.bg-tint {
    background: color-mix(
      in srgb,
      var(--pico-primary),
      var(--pico-background-color) 92%
    );
    border-color: color-mix(in srgb, var(--pico-primary), transparent 85%);
  }

  /* Slightly stronger brand tint (use for alternating sections) */
  .card.bg-tint-alt {
    background: color-mix(
      in srgb,
      var(--pico-primary),
      var(--pico-background-color) 88%
    );
    border-color: color-mix(in srgb, var(--pico-primary), transparent 80%);
  }

  /* Subtle elevation without brand color (great for “Verdict / CTA”) */
  .card.bg-elevated {
    background: color-mix(in srgb, var(--pico-background-color), #000 4%);
    border-color: var(--pico-muted-border-color);
  }
  html[data-theme="dark"] .card.bg-elevated,
  .pico[data-theme="dark"] .card.bg-elevated {
    background: color-mix(in srgb, var(--pico-background-color), #fff 6%);
    border-color: color-mix(in srgb, var(--pico-muted-border-color), #fff 10%);
  }

  /* Neutral surface (reset to standard card look if needed) */
  .card.bg-surface {
    background: var(--pico-card-background-color, var(--pico-background-color));
    border-color: var(--pico-muted-border-color);
  }

  /* Strong brand section (use sparingly; flips text for readability) */
  .card.bg-amber {
    --_fg: var(--pico-primary-inverse);
    background: var(--pico-primary-background);
    color: var(--_fg);
    border-color: color-mix(in srgb, var(--pico-primary), transparent 70%);
  }
  .card.bg-amber :is(h1, h2, h3, h4, h5, h6, p, small, strong, em, span, li) {
    color: inherit;
  }
  .card.bg-amber a {
    color: inherit;
    text-decoration-color: color-mix(in srgb, currentColor, transparent 55%);
  }
  .card.bg-amber .cta-row a.contrast {
    /* keep contrast button legible on amber */
    border-color: color-mix(in srgb, var(--_fg), transparent 70%);
  }

  /* Optional: give every card a consistent outline so tints read as sections */
  .container > .card,
  .container > .cta.card {
    margin-block: 0.8rem;
    border: 1px solid var(--pico-muted-border-color);
    border-radius: var(--pico-border-radius, 8px);
  }
</style>


// File: pages/Home.svelte
<script>
  import bgSvg from "../assets/xsync.svg";
  import bgVideo from "../assets/bg.mp4";
  import Typewriter from "../components/Typewriter.svelte";
  import GetStartButton from "../components/GetStartButton.svelte";

  let showButton = false;

  export let rightTopImage =
    "https://images01.nicepage.com/c461c07a441a5d220e8feb1a/8d0c62508a53506da5f8966f/FDSF.jpg";
  export let leftImage =
    "https://images01.nicepage.com/c461c07a441a5d220e8feb1a/e76b5b7b20de5ea0ac53c38a/bitcoin-pile-top-dolar-bills_23-2148285293.jpg";
</script>

<!-- Decorative amber band -->
<div class="band" aria-hidden="true"></div>

<main class="container" style={`--bg:url(${bgSvg})`}>
  <!-- Hero with typewriter headline -->
  <section class="hero">
    <article class="card card--headline">
      <Typewriter
        text="USDNote™ — the easiest way to access and earn from U.S. Treasuries"
        speed={60}
        on:start={() => (showButton = false)}
        on:done={() => (showButton = true)}
      />
      {#if showButton}
        <div class="action">
          <GetStartButton />
        </div>
      {/if}
    </article>

    <figure class="media-left">
      <img src={leftImage} alt="Bitcoin on dollar bills" />
    </figure>
  </section>

  <!-- Tip: what is USDNote -->
  <article class="card card--tip">
    <ul>
      <li>USDNote = tokenized note backed 1:1 by U.S. Treasuries + cash.</li>
      <li>Distributes Treasury yield back to holders.</li>
      <li>
        Powered by the Lockcoin Microchain patent → faster, more private, more
        auditable than blockchain.
      </li>
    </ul>
  </article>

  <!-- Right decorative image -->
  <div
    class="media-right"
    style={`--img:url(${rightTopImage})`}
    aria-hidden="true"
  ></div>

  <!-- Lifecycle -->
  <article class="card card--tip">
    <header><h3>Lifecycle of a USDNote™</h3></header>
    {#each [{ title: "Buy / Issue", body: "User sends USD (via bank transfer, on-ramp, or licensed partner). Issuer buys short-term Treasuries. New USDNotes are minted and credited to the wallet. Each coin carries a lock + key." }, { title: "Hold / Earn", body: "While holding, Treasuries generate yield. Periodically, 90% is distributed to holders in new USDNotes ('dividend coins'); 10% retained for expenses." }, { title: "Transfer", body: "Two modes: Cash-like (private, instant, no receipt). Check-like (signed with key, creates auditable receipt). Transfers are validated by locks." }, { title: "Redeem", body: "Holder returns USDNotes to issuer. Issuer sells Treasuries (or uses cash buffer). User gets USD 1:1. Redeemed coins are burned." }] as step}
      <article class="cardstep">
        <h6>{step.title}</h6>
        <p>{step.body}</p>
      </article>
    {/each}
  </article>

  <!-- Why USDNote -->
  <article class="card card--tip">
    <header><h3>Why USDNote™?</h3></header>
    <ul>
      <li><strong>Sustainable</strong> — no mining, no energy waste.</li>
      <li><strong>Scalable</strong> — millions of transactions per second.</li>
      <li><strong>Secure</strong> — fraud alerts + time-delay safety.</li>
      <li>
        <strong>Secrecy</strong> — anonymity (cash-like) or protected receipts (check-like).
      </li>
      <li><strong>Speed</strong> — milliseconds to finality.</li>
    </ul>
  </article>

  <!-- Background video hero -->
  <section class="hihero">
    <video autoplay muted loop playsinline class="bg-video">
      <source src={bgVideo} type="video/mp4" />
    </video>
    <div class="hihero-content">
      <h1>USDNote™</h1>
      <p>Dividend-paying stablecoin backed by U.S. Treasuries.</p>
      <GetStartButton />
    </div>
  </section>
</main>

<!-- Footer -->
<footer class="footer">
  <div class="container">
    <div class="footer-grid">
      {#each Array(3) as _}
        <section>
          <h6>Headline</h6>
          <p class="muted">Sample footer text</p>
        </section>
      {/each}
    </div>
  </div>
</footer>

<style>
  :root {
    --r: 6px;
    --veil: color-mix(in srgb, #fff 70%, transparent);
  }
  .container {
    max-width: min(100%, 1140px);
    padding-inline: clamp(16px, 3vw, 28px);
    position: relative;
  }
  main.container::before {
    content: "";
    position: absolute;
    inset: 0;
    background-image: var(--bg);
    background-repeat: no-repeat;
    background-position: top;
    transform: rotate(15deg);
    transform-origin: top;
    opacity: 0.15;
    z-index: 0;
    pointer-events: none;
  }
  main.container > * {
    position: relative;
    z-index: 1;
  }

  .band {
    margin-top: 2.5rem;
    height: 64px;
    background: var(--brand-amber-600);
  }

  /* Hero */
  .hero {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: clamp(16px, 2.5vw, 24px);
    margin-top: -120px;
    align-items: start;
  }
  @media (max-width: 991px) {
    .hero {
      grid-template-columns: 1fr;
      margin-top: -100px;
    }
  }

  /* Cards */
  .card {
    background: #fff;
    border-radius: var(--r);
    padding: 24px 36px;
  }
  .card--headline {
    background: var(--brand-jade-100);
    box-shadow: 0 10px 28px rgba(0, 0, 0, 0.3);
  }
  .card--tip {
    border: 1px solid var(--deco-border-amber);
  }
  .cardstep h6 {
    color: var(--brand-jade-800);
  }
  .cardstep p {
    color: var(--brand-jade-900);
  }

  /* Media */
  .media-left img {
    width: 100%;
    height: auto;
    border-radius: var(--r);
    object-fit: cover;
  }
  .media-right {
    min-height: 360px;
    border-radius: var(--r);
    border: 1px solid var(--deco-border-amber);
    background: center/cover no-repeat var(--veil);
    background-image: var(--img);
  }

  /* Action area */
  .action {
    margin-top: 2rem;
    display: flex;
    justify-content: flex-start;
  }
  button {
    border: none;
    width: 8rem;
  }

  /* Video hero */
  .hihero {
    position: relative;
    min-height: 60vh;
    overflow: hidden;
  }
  .bg-video {
    position: absolute;
    inset: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    z-index: -1;
  }
  .hihero-content {
    position: absolute;
    right: 1.5rem;
    bottom: 1.5rem;
    max-width: 400px;
    text-align: right;
  }
  .hihero-content h1 {
    color: var(--brand-jade-100);
  }
  .hihero-content p {
    color: white;
  }

  /* Footer */
  .footer {
    border-top: 1px solid var(--pico-muted-border-color);
    padding: 28px 0;
    margin-top: 32px;
    background: var(--brand-jade-100);
  }
  .footer-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1.25rem;
  }
  @media (max-width: 991px) {
    .footer-grid {
      grid-template-columns: 1fr;
    }
  }
  .muted {
    color: #61706b;
  }
</style>


// File: pages/Login.svelte
<script>
  import FormHeader from "../ui/FormHeader.svelte";
  import TextField from "../ui/TextField.svelte";
  import Checkbox from "../ui/Checkbox.svelte";
  import Button from "../ui/Button.svelte";
  import Toast from "../ui/Toast.svelte";
  import { login } from "../stores/auth.js";
  import page from "page"; // ✅ ADD THIS

  let email = "";
  let pwd = "";
  let showPwd = false;
  let remember = false;
  let isSubmitting = false;

  let toastMessage = "";
  let toastType = "info";

  function handleSubmit(e) {
    e.preventDefault();

    if (!email || !pwd) {
      toastMessage = "Please enter your email and password";
      toastType = "error";
      return;
    }

    // UI-only submit simulation
    isSubmitting = true;
    setTimeout(() => {
      isSubmitting = false;
      toastMessage = `Logged in (demo)${remember ? " — Remembered" : ""}`;
      toastType = "success";
      login(); // ✅ set isAuthed = true
      page("/dashboard"); // ✅ redirect
    }, 600);
  }
</script>

<article>
  <header class="form-header">
    <FormHeader title="Log In" />
  </header>

  <form on:submit={handleSubmit} novalidate>
    <TextField
      id="email-login"
      label="Email"
      type="email"
      bind:value={email}
      required
    />

    {#if showPwd}
      <TextField
        id="password-login"
        label="Password"
        type="text"
        bind:value={pwd}
        required
      />
    {:else}
      <TextField
        id="password-login"
        label="Password"
        type="password"
        bind:value={pwd}
        required
      />
    {/if}

    <Checkbox id="show-pwd" bind:checked={showPwd}>Show Password</Checkbox>

    <Button
      type="submit"
      disabled={isSubmitting}
      aria-busy={isSubmitting ? "true" : "false"}
    >
      {isSubmitting ? "Logging in..." : "Log In"}
    </Button>

    <p>
      Don’t have an account? <a href="/signup">Sign up</a>
      &nbsp;·&nbsp;
      <a href="/forgot-password">Forgot password?</a>
    </p>
  </form>

  <Toast message={toastMessage} type={toastType} />
</article>


// File: pages/Playground.svelte
<script>
  import Button from "../ui/Button.svelte";
  import Checkbox from "../ui/Checkbox.svelte";
  import TextField from "../ui/TextField.svelte";
  import ThemeSwitcher from "../components/ThemeSwitcher.svelte";

  let dialogEl;
  let email = "";
  let amount = 100;
  let open = false;

  function submit(e) {
    e.preventDefault();
    openDialog();
  }

  function openDialog() {
    open = true;
    dialogEl?.showModal();
  }

  function closeDialog() {
    open = false;
    dialogEl?.close();
  }
</script>

<ThemeSwitcher />
<section>
  <h2>UI Playground</h2>
  <p>Quickly test Pico styles, forms, and components (Amber + light/dark).</p>

  <!-- Buttons -->
  <article class="card">
    <h3>Buttons</h3>
    <div class="grid">
      <Button>Custom</Button>
      <Button>Default</Button>
      <Button class="secondary">Secondary</Button>
      <Button class="contrast">Contrast</Button>
      <Button disabled>Disabled</Button>
    </div>
  </article>

  <!-- Form -->
  <article class="card">
    <h3>Form</h3>
    <form on:submit={submit} style="max-width:520px;">
      <TextField
        id="email-login"
        label="Email"
        type="email"
        bind:value={email}
        required
      />

      <TextField
        id="amt"
        label="Amount"
        type="number"
        bind:value={amount}
        min="0"
        step="0.01"
        required
      />

      <div style="display:flex; gap:.75rem; margin-top:1rem;">
        <Button type="submit">Submit</Button>
        <Button
          type="button"
          class="secondary"
          on:click={() => {
            email = "";
            amount = 100;
          }}>Reset</Button
        >
      </div>
      <Checkbox id="chkbox">Show Password</Checkbox>
    </form>
  </article>

  <!-- Misc -->
  <article class="card">
    <h3>Misc</h3>
    <progress value="40" max="100"></progress>
    <details>
      <summary>Accordion</summary>
      <p>Pico’s defaults look clean with minimal markup.</p>
    </details>
  </article>

  <!-- Modal trigger -->
  <article class="card">
    <h3>Modal</h3>
    <Button class="contrast" type="button" on:click={openDialog}
      >Open Modal</Button
    >
  </article>
</section>

<!-- Accessible native dialog (no click handlers on non-interactive elements) -->
<dialog bind:this={dialogEl}>
  <article>
    <header>
      <Button aria-label="Close" rel="prev" type="button" on:click={closeDialog}
      ></Button>
      <h3>Confirm</h3>
    </header>
    <p>
      Submit transaction for <strong>{email || "N/A"}</strong> —
      <strong>${amount}</strong>?
    </p>
    <footer>
      <Button class="secondary" type="button" on:click={closeDialog}
        >Cancel</Button
      >
      <Button type="button" on:click={closeDialog}>Confirm</Button>
    </footer>
  </article>
</dialog>


// File: pages/Signup.svelte
<script>
  import FormHeader from "../ui/FormHeader.svelte";
  import TextField from "../ui/TextField.svelte";
  import PasswordField from "../ui/PasswordField.svelte";
  import Checkbox from "../ui/Checkbox.svelte";
  import Button from "../ui/Button.svelte";
  import Toast from "../ui/Toast.svelte";
  import { login } from "../stores/auth.js";
  import page from "page"; // ✅ ADD THIS

  let firstName = "";
  let lastName = "";
  let phone = "";
  let email = "";
  let email2 = "";
  let pwd = "";
  let pwd2 = "";
  let showPwd = false; // mirrors your working page's "Show Password"
  let isSubmitting = false;

  let toastMessage = "";
  let toastType = "info";

  $: emailMatch =
    email &&
    email2 &&
    email.trim().toLowerCase() === email2.trim().toLowerCase();
  $: pwdMatch = pwd && pwd2 && pwd === pwd2;

  function handleSubmit(e) {
    e.preventDefault();

    if (!email || !pwd || !firstName || !lastName) {
      toastMessage = "Please fill all required fields";
      toastType = "error";
      return;
    }
    if (!emailMatch) {
      toastMessage = "Email fields do not match";
      toastType = "error";
      return;
    }
    if (!pwdMatch) {
      toastMessage = "Password fields do not match";
      toastType = "error";
      return;
    }

    // UI-only submit
    isSubmitting = true;
    setTimeout(() => {
      isSubmitting = false;
      toastMessage = "Account created (demo)!";
      toastType = "success";
      login(); // ✅ set isAuthed = true
      page("/dashboard"); // ✅ redirect
    }, 600);
  }
</script>

<article>
  <header>
    <FormHeader title="Sign Up" />
  </header>

  <form on:submit={handleSubmit} novalidate>
    <TextField
      id="first-name"
      label="First Name"
      bind:value={firstName}
      required
    />
    <TextField
      id="last-name"
      label="Last Name"
      bind:value={lastName}
      required
    />

    <TextField
      id="phone-number"
      label="Phone Number"
      type="tel"
      bind:value={phone}
    />

    <TextField
      id="email-signup"
      label="Email"
      type="email"
      bind:value={email}
      required
    />
    <TextField
      id="confirm-email-signup"
      label="Confirm Email"
      type="email"
      bind:value={email2}
      required
      invalid={email && email2 && !emailMatch}
      hint={!emailMatch && email && email2 ? "Emails do not match" : ""}
    />

    <!-- Password + confirm (toggle show like your working page) -->
    {#if showPwd}
      <TextField
        id="password-signup"
        label="Password"
        type="text"
        bind:value={pwd}
        required
      />
      <TextField
        id="confirm-password-signup"
        label="Confirm Password"
        type="text"
        bind:value={pwd2}
        required
        invalid={pwd && pwd2 && !pwdMatch}
        hint={!pwdMatch && pwd && pwd2 ? "Passwords do not match" : ""}
      />
    {:else}
      <TextField
        id="password-signup"
        label="Password"
        type="password"
        bind:value={pwd}
        required
      />
      <TextField
        id="confirm-password-signup"
        label="Confirm Password"
        type="password"
        bind:value={pwd2}
        required
        invalid={pwd && pwd2 && !pwdMatch}
        hint={!pwdMatch && pwd && pwd2 ? "Passwords do not match" : ""}
      />
    {/if}

    <Checkbox id="show-pwd" bind:checked={showPwd}>Show Password</Checkbox>

    <Button
      type="submit"
      disabled={isSubmitting}
      aria-busy={isSubmitting ? "true" : "false"}
    >
      {isSubmitting ? "Signing up..." : "Sign Up"}
    </Button>

    <p>Already have account? <a href="/login">Log in</a></p>
  </form>

  <Toast message={toastMessage} type={toastType} />
</article>


// File: router.js
import page from "page";
import Home from "./pages/Home.svelte";
import Playground from "./pages/Playground.svelte";
import Signup from "./pages/Signup.svelte";
import Login from "./pages/Login.svelte";
import Dashboard from "./pages/Dashboard.svelte";

const mount = (Comp) => {
  const target = document.getElementById("view");
  if (!target) return;
  target.innerHTML = "";
  new Comp({ target });
};

page("/", () => mount(Home));
page("/dashboard", () => mount(Dashboard));
page("/playground", () => mount(Playground));
page("/signup", () => mount(Signup));
page("/login", () => mount(Login));
page(); // start router


// File: stores/auth.js
// stores/auth.js
import { writable } from "svelte/store";

export const isAuthed = writable(false);

export function login() {
  isAuthed.set(true);
}

export function logout() {
  isAuthed.set(false);
}


// File: ui/Button.svelte
<script>
  export let type = "button";
  export let disabled = false;
  // optional visual variant; keep or ignore in your CSS
  export let variant = ""; // "primary" | "outline" | "ghost" | ""
</script>

<button
  {type}
  {disabled}
  class={`btn${variant ? ` ${variant}` : ""}`}
  {...$$restProps}
>
  <slot />
</button>

<style>
  /* Keep minimal so your form.css controls layout (e.g., width:100%) */
  .btn:active {
    transform: translateY(1px);
  }
  .btn[disabled] {
    opacity: 0.6;
    cursor: not-allowed;
  }
  /* optional variants if you use them */
  .primary {
    background: var(--pico-primary);
    color: var(--pico-primary-inverse);
  }
  .outline {
    background: transparent;
    border-color: var(--pico-primary);
    color: var(--pico-primary);
  }
  .ghost {
    background: transparent;
    color: inherit;
  }
</style>


// File: ui/Checkbox.svelte
<script>
  export let id;
  export let checked = false;
  export let label = "";
</script>

<label class="label-inline">
  <input {id} type="checkbox" bind:checked />
  <span><slot>{label}</slot></span>
</label>


// File: ui/FormHeader.svelte
<script>
  export let title = "";
  export let subtitle = "";
</script>

<div class="ph">
  <h1>{title}</h1>
  {#if subtitle}<p class="muted">{subtitle}</p>{/if}
</div>

<style>
  .ph {
    margin: 1rem 0 1.5rem;
  }
  .muted {
    color: var(--pico-muted-color);
    font-size: 0.9rem;
    margin-top: -1rem;
  }
</style>


// File: ui/PageHeader.svelte
<script>
  export let title = "";
  export let subtitle = "";
</script>

<header class="ph">
  <h1>{title}</h1>
  {#if subtitle}<p class="muted">{subtitle}</p>{/if}
</header>

<style>
  .ph {
    margin: 1rem 0 1.5rem;
  }
  .muted {
    color: var(--pico-muted-color);
  }
</style>


// File: ui/PasswordField.svelte
<script>
  export let id = "password";
  export let label = "Password";
  export let value = "";
  export let placeholder = "";
  export let required = false;
  export let showMeter = false; // default off to match your working screen
  let show = false;

  $: score = strength(value);
  function strength(pwd) {
    const l = pwd.length,
      lo = /[a-z]/.test(pwd),
      up = /[A-Z]/.test(pwd),
      n = /\d/.test(pwd),
      s = /[^A-Za-z0-9]/.test(pwd);
    let k = 0;
    if (l >= 8) k++;
    if (l >= 12) k++;
    if (lo && up) k++;
    if (n) k++;
    if (s) k++;
    return {
      k,
      pct: Math.min(100, (k / 5) * 100),
      label:
        k >= 4 ? "Strong" : k === 3 ? "Good" : k === 2 ? "Weak" : "Very weak",
    };
  }
</script>

{#if label}<label for={id}>{label}</label>{/if}

{#if show}
  <input
    {id}
    type="text"
    bind:value
    {placeholder}
    {required}
    aria-describedby={showMeter ? `${id}-meter ${id}-hint` : null}
  />
{:else}
  <input
    {id}
    type="password"
    bind:value
    {placeholder}
    {required}
    aria-describedby={showMeter ? `${id}-meter ${id}-hint` : null}
  />
{/if}

<label class="label-inline">
  <input type="checkbox" bind:checked={show} />
  Show Password
</label>

{#if showMeter}
  <div
    id={`${id}-meter`}
    style="height:6px;background:var(--pico-muted-border-color);border-radius:999px;overflow:hidden;margin-top:.5rem;"
  >
    <div
      style={`height:100%;width:${score.pct}%;background:var(--pico-primary);`}
    ></div>
  </div>
  <small id={`${id}-hint`}
    >{score.label}. Use 12+ chars, mix case, numbers, symbol.</small
  >
{/if}


// File: ui/TextField.svelte
<script>
  export let id;
  export let label = "";
  export let type = "text"; // "text" | "email" | "tel" | "password" | "number"
  export let value = ""; // if you want numeric binding, see valueAsNumber below
  export let placeholder = "";
  export let autocomplete = undefined;
  export let required = false;
  export let invalid = false;
  export let hint = "";

  // Number-only helpers (optional)
  export let min = undefined;
  export let max = undefined;
  export let step = undefined;
  export let valueAsNumber = false; // set true to coerce to a Number
  export let inputmode = undefined; // e.g. "decimal" or "numeric" to hint mobile keyboard

  function onNumberInput(e) {
    if (!valueAsNumber) return;
    const n = e.currentTarget.valueAsNumber;
    // When the field is empty, valueAsNumber is NaN — keep it as "" for nicer UX
    value = Number.isNaN(n) ? "" : n;
  }
</script>

{#if label}<label for={id}>{label}</label>{/if}

{#if type === "email"}
  <input
    {id}
    type="email"
    bind:value
    {placeholder}
    {autocomplete}
    {required}
    aria-invalid={invalid}
    aria-describedby={hint ? `${id}-hint` : null}
  />
{:else if type === "tel"}
  <input
    {id}
    type="tel"
    bind:value
    {placeholder}
    {autocomplete}
    {required}
    aria-invalid={invalid}
    aria-describedby={hint ? `${id}-hint` : null}
  />
{:else if type === "password"}
  <input
    {id}
    type="password"
    bind:value
    {placeholder}
    {autocomplete}
    {required}
    aria-invalid={invalid}
    aria-describedby={hint ? `${id}-hint` : null}
  />
{:else if type === "number"}
  <input
    {id}
    type="number"
    bind:value
    {placeholder}
    {required}
    {min}
    {max}
    {step}
    {inputmode}
    on:input={onNumberInput}
    aria-invalid={invalid}
    aria-describedby={hint ? `${id}-hint` : null}
  />
{:else}
  <input
    {id}
    type="text"
    bind:value
    {placeholder}
    {autocomplete}
    {required}
    aria-invalid={invalid}
    aria-describedby={hint ? `${id}-hint` : null}
  />
{/if}

{#if hint}<small id={`${id}-hint`}>{hint}</small>{/if}


// File: ui/Toast.svelte
<script>
  import { onMount } from "svelte";
  export let message = "";
  export let type = "info"; // info | success | error
  export let duration = 3000;
  let visible = false;
  let timer;

  onMount(() => {
    if (message) show();
  });

  function show() {
    visible = true;
    clearTimeout(timer);
    timer = setTimeout(() => (visible = false), duration);
  }

  $: if (message) show();
</script>

{#if visible}
  <aside class={`toast ${type}`} role="status" aria-live="polite">
    {message}
  </aside>
{/if}

<style>
  .toast {
    position: fixed;
    bottom: 1rem;
    right: 1rem;
    padding: 0.8rem 1.2rem;
    border-radius: 0.7rem;
    background: var(--pico-card-background-color);
    box-shadow: var(--pico-shadow);
    z-index: 1000;
  }
  .toast.info {
    border-left: 4px solid var(--pico-primary);
  }
  .toast.success {
    border-left: 4px solid var(--pico-secondary);
  }
  .toast.error {
    border-left: 4px solid var(--pico-del-color);
  }
</style>